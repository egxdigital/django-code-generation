"""Codegeneration Functions

This module contains the functions that do the main work of the code
generator.


Examples
--------
    generate_code(output_dir, *[('appname', 'path/to/input/csv'), ... ])

Notes
-----
    1. generate_models is called like a helper by generate_code
    2. ...

Attributes
----------
    django_model_objects: dict
        Key: model names, value: DjangoModel object
    foreignkeynames_models: dict
        Key: lower case foreign key field name, value: uppercase model name

Author
-----
    emilledigital@gmail.com
"""
import pprint
import csv
import os
from codegeneration.models import *
from codegeneration.helpers import *

django_model_objects = {}
foreignkeynames_models = {}

def generate_models(inp, djangoapp):
    """Takes a file path and a Django app name and populates
    global data structures django_model_objects and
    foreignkeynames_models

    Parameters
    ----------
    inp : str, Path
        The path to a csv file containing the data for the models.

    djangoapp : str
        Name of the Django app.

    Returns
    -------
    Integer
        Number of models detected in each CSV file.
    """

    with open(inp) as fd:
        rdr = csv.reader(fd, delimiter=',')
        next(rdr)

        for row in rdr:
            djangofield = row[0]
            fieldname = row[1]

            if djangofield == 'models.Model':
                model_name = fieldname

                # Save some data
                underscored = helper_return_underscore_separated_fieldname(model_name)
                foreignkeynames_models[underscored] = model_name

                # Create object and save
                obj = DjangoModel(model_name, djangoapp)
                obj.add_line_to_models_code_fragment(djangofield, fieldname)
                obj.add_line_to_test_models_code_fragment(djangofield, fieldname)
                django_model_objects[model_name] = obj


            list_of_models = foreignkeynames_models.values()

            if fieldname in list_of_models:
                curr = django_model_objects.get(fieldname)

            if djangofield == 'ForeignKey':
                fkey_model_name = foreignkeynames_models.get(fieldname)
                foreignkeymodel = django_model_objects.get(fkey_model_name)
                curr.add_foreign_keys(foreignkeymodel)

            if fieldname not in list_of_models:
                curr.add_field(djangofield, fieldname)

    models_detected = len(django_model_objects.keys())
    return models_detected

def generate_code(output_dir, *djangoapps_inputfiles):
    """Takes a directory and an arbitary number of tuples
    and generates code in appname_models.py and appname_test_models.py.

    Parameters
    ----------
    output_dir : 'str' or Path-like object
        The target directory for saving the output of the code generator.

    *djangoapps_inputfiles : List[tuple]
        tuples of the form ('appname', 'input file')

    Returns
    -------
    Integer
        Number of files generated by generate_code
    """

    filepaths = {}
    appnames = []

    for tup in djangoapps_inputfiles:
        appname = tup[0]
        input_csv = tup[1]
        filepaths[appname] = helper_return_dest_models_py_filepath(appname, output_dir)
        appnames.append(appname)
        generate_models(input_csv, appname)

    for appname in appnames:
        dest_models = filepaths[appname][0]
        dest_test_models = filepaths[appname][1]
        helper_prepare_models_py(dest_models)

    for model in django_model_objects.keys():
        m = django_model_objects.get(model)

        for appname in appnames:
            if m.djangoapp == appname:
                dest_models = filepaths[appname][0]
                dest_test_models = filepaths[appname][1]
                with open(dest_models, 'a') as modelspy:
                    modelspy.write(m.models_code_fragment)

                with open(dest_test_models, 'a') as testpy:
                    testpy.write(m.test_models_code_fragment)

    for appname in appnames:
        models = {}

        for model in django_model_objects.values():
            if model.djangoapp == appname:
                models[helper_return_underscore_separated_fieldname(model.modelname)] = model.modelname

        helper_prepare_test_models_py(appname, models, filepaths[appname][1])

    created = len(os.listdir(output_dir))
    return created

if __name__ == '__main__':
    import os
    data_dir = os.path.abspath(os.path.join(os.path.dirname( __file__ ), 'data'))
    output_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'deleteme'))

    src1 = '{}/jobsdatastore.csv'.format(data_dir)
    src2 = '{}/jobsdatabucket.csv'.format(data_dir)

    jobsdatastore = ('jobsdatastore', src1)
    jobsdatabucket = ('jobsdatabucket', src2)

    generate_code(output_dir, *[jobsdatastore, jobsdatabucket])
